[
  {
    "title": "Staychaintion",
    "summary": "A Web3‑powered AI platform for short‑term property rentals on the Internet Computer combining Motoko canisters for decentralized trust, AI‑driven pricing, and an assistant chatbot (StayAI). Award winning and first place in the CodeFest ICP Hackathon 11 Indonesia.",
    "role": "Backend lead — designed and implemented storage, backend APIs, canister integrations, frontend connectivity, and managed deployment workflows (dfx).",
    "features": "Blockchain‑secured transactions, decentralized trust via Motoko canisters, AI smart pricing service, StayAI chatbot, data seeders, deployment scripts and demo data, frontend API integration (Axios).",
    "tech": "Motoko (canisters backend), dfx (Internet Computer tooling), TypeScript (frontend), Node.js, Python (model training & FastAPI prediction), Jupyter notebooks, Axios.",
    "achievement": "First place in the competition; production‑grade backend integrations with documentation, pitch deck, and demo video.",
    "next": "Improve model accuracy, harden canister storage patterns for scale, automate dfx CI/CD, and expand StayAI's conversational capabilities and safety checks.",
    "color": "from-violet-600 to-purple-600",
    "highlights": [
      "Web3 + AI integration",
      "Backend lead (storage & APIs)",
      "Competition winner (1st place)"
    ],
    "model": "staychaintion.glb",
    "image": "staychaintion.png",
    "links": [
      { "label": "Repository", "url": "https://github.com/nathanielalex/Staychaintion.git" },
      { "label": "Demo Video", "url": "https://drive.google.com/file/d/1CnUGvAF6VMQLnUvK59eWFMMUCT3y4AsJ/view?usp=sharing" },
      { "label": "Documentation", "url": "https://www.notion.so/stanley-n-wijaya/StayChaintion-Documentation-1af73555b71f805a933ff1074e3e8059" }
    ]
  },
  {
    "title": "Moorgan-IoT",
    "summary": "An IoT system for convenient and efficient cattle health monitoring that collects low‑power sensor data and provides telemetry, analytics, and alerts for livestock management.",
    "role": "Team contributor focused on IoT integration, firmware, and system cloud integration to ensure reliable sensor telemetry and device behavior in farm environments.",
    "features": "Sensor data acquisition, local preprocessing, reliable telemetry to edge/cloud, farmer‑friendly design and alerting.",
    "tech": "C++, C (firmware and low‑level drivers); standard IoT connectivity patterns (MQTT/HTTP gateways implied).",
    "achievement": "Top‑10 finish in the Microsoft ElevAIte hackathon with a validated prototype and working telemetry pipeline.",
    "next": "Expand sensor coverage, add OTA updates and telemetry dashboards, integrate ML for anomaly detection, and prepare for field trials.",
    "color": "from-amber-600 to-orange-600",
    "highlights": [
      "Livestock health telemetry",
      "Low‑power firmware",
      "Hackathon top‑10"
    ],
    "model": "moorgan_iot.glb",
    "image": "moorgan_iot.jpg",
    "links": [
      { "label": "Repository", "url": "https://github.com/StyNW7/Moorgan-IoT.git" },
      { "label": "Demo Video", "url": "https://binusianorg-my.sharepoint.com/personal/stanley_wijaya004_binus_ac_id/_layouts/15/guestaccess.aspx?share=EYMWsQ71C9NHv2bWAHrP4L8BMcDJ3e6a9U_hsyYi_i-wlw&nav=eyJyZWZlcnJhbEluZm8iOnsicmVmZXJyYWxBcHAiOiJPbmVEcml2ZUZvckJ1c2luZXNzIiwicmVmZXJyYWxBcHBQbGF0Zm9ybSI6IldlYiIsInJlZmVycmFsTW9kZSI6InZpZXciLCJyZWZlcnJhbFZpZXciOiJNeUZpbGVzTGlua0NvcHkifX0&e=eWRR7c" },
      { "label": "Documentation", "url": "https://stanley-n-wijaya.notion.site/Moorgan-Documentation-1df73555b71f80fd9fd9dbfc655ce5a7?pvs=4" }
    ]
  },
    {
    "title": "Golden Trash",
    "summary": "An automatic rubbish‑sorting smart bin that classifies waste using a YOLOv5 computer vision model and actuates sorting with an embedded controller (ESP32).",
    "role": "Engineered the end‑to‑end pipeline: model inference integration with embedded firmware and actuation logic.",
    "features": "YOLOv5‑based classification, ESP32 firmware for actuation, embedded control logic, basic monitoring/dashboard.",
    "tech": "Python (YOLOv5 training & inference pipelines), C++/C (ESP32 firmware), JavaScript + HTML (UI/dashboard).",
    "achievement": "Completed as a university course project demonstrating edge CV deployment and embedded integration.",
    "next": "Optimize inference latency and power consumption, extend dataset/class coverage, and add real‑time telemetry/analytics.",
    "color": "from-lime-600 to-green-600",
    "highlights": [
      "Edge CV deployment",
      "ESP32 actuation",
      "Academic project"
    ],
    "model": "golden_trash.glb",
    "image": "golden_trash.png",
    "links": [
      { "label": "Repository", "url": "https://github.com/123jason689/golden_trash.git" },
      { "label": "Demo Video", "url": "https://drive.google.com/file/d/1V-xNg7HTjrDbDp9XOzyCG-_occJgqBsg/view?usp=sharing" }
    ]
  },
  {
    "title": "Vemer",
    "summary": "A full‑stack, gamified volunteer and activity management platform for youth—organizers publish activities and volunteers earn points, badges, and levels displayed on leaderboards.",
    "role": "Full‑stack developer that is responsible for API↔frontend integration across separate backend and frontend repositories.",
    "features": "RESTful API (routes/v1/api.php), secure authentication (Google SSO), activity creation & management, custom badges, leaderboards, personalized dashboards, Supabase storage integration.",
    "tech": "Backend — PHP (Laravel), PostgreSQL, Supabase (storage); Frontend — TypeScript/JavaScript, Vite, Tailwind CSS; dev tooling: Composer, Node.js, Laravel artisan.",
    "achievement": "Complete backend and frontend repos with installation guides and documented API endpoints; working platform for organizers and volunteers.",
    "next": "Expand publisher tools (badge editor, analytics), refine frontend UX flows, scale auth & storage, and add monitoring for activity lifecycle.",
    "color": "from-blue-600 to-cyan-600",
    "highlights": [
      "Gamified volunteering",
      "Organizer dashboards",
      "Leaderboard & badges"
    ],
    "model": "vemer.glb",
    "image": "vemer.png",
    "links": [
      { "label": "Repo BE", "url": "https://github.com/StanleyJo-37/vemer-backend.git" },
      { "label": "Repo FE", "url": "https://github.com/StanleyJo-37/vemer-frontend.git" }
    ]
  },
  {
    "title": "Beta-Indonesia",
    "summary": "An interactive platform designed to teach and promote Indonesian culture through playful, gamified learning experiences that encourage user engagement and cultural preservation.",
    "role": "AI Backend developer, building AI Style Transfer backend feature and frontend page, while also responsible for efficiently deploying backend AI processes to Azure.",
    "features": "Interactive learning modules, gamified progression, content designed to increase cultural interaction and retention.",
    "tech": "React, TypeScript, Tailwind CSS, MongoDB, Express JS, Python, Flask, Hugging Face, Docker, Azure",
    "achievement": "Submitted to GemasTIK Software Development 2025 as a contest entry showcasing cultural education features.",
    "next": "Add engagement analytics, iterate UX to boost interaction, expand content modules and localization.",
    "color": "from-green-600 to-emerald-600",
    "highlights": [
      "Cultural education",
      "Gamified learning",
      "Contest submission"
    ],
    "model": "beta_indonesia.glb",
    "image": "beta_indonesia.png",
    "links": [
      { "label": "Repository", "url": "https://github.com/StyNW7/Beta-Indonesia.git" },
      { "label": "Live Demo", "url": "https://beta-indonesia.vercel.app/" }
    ]
  },
  {
    "title": "LLM benchmark",
    "summary": "A research study comparing popular LLM/chatbot capabilities on competitive programming problems, measuring correctness, reasoning, and solution quality.",
    "role": "Contribute on designing and developing analysis, preprocessing, prompt building, and deigned pipeline for sending prompt requests to LLM APIs.",
    "features": "Benchmark problem set, reference C++ solutions and harnesses, automated evaluation pipeline, notebooks for metrics and visualization.",
    "tech": "C++ (reference solutions/harness), Jupyter Notebooks, Python (analysis, orchestration, & preprocessing).",
    "achievement": "Reproducible notebooks and experimental framework ready for publication or extension.",
    "next": "Expand model coverage, build error taxonomy for failure modes, and prepare results for publication.",
    "color": "from-rose-600 to-pink-600",
    "highlights": [
      "LLM benchmarking",
      "Reproducible experiments",
      "Competitive programming"
    ],
    "model": "llm_benchmark.glb",
    "image": "llm_benchmark.png",
    "links": [
      { "label": "Repository", "url": "https://github.com/StanleyJo-37/competitive-programming-chatbots-comprasion.git" },
      { "label": "Research Document", "url": "https://binusianorg-my.sharepoint.com/personal/stanley_wahjudi_binus_ac_id/Documents/conference-template-a4.docx?d=w0e1c0e846a3844bf8a1956968ef234f9&csf=1&web=1&e=kVMcOq" }
    ]
  },
  {
    "title": "Depression-Learning",
    "summary": "A supervised machine learning pipeline for depression screening that builds a production-ready binary classifier through disciplined preprocessing, systematic hyperparameter tuning, and rigorous cross-validation.",
    "role": "Led end-to-end ML workflow: data preprocessing, hyperparameter search design, model selection, training, evaluation, pipeline serialization (pickling), and backend deployment on Railway deployement service.",
    "features": "Configurable preprocessing (cleaning, encoding, scaling), structured hyperparameter tuning over candidate models, tree-based model selection, cross-validation with multiple metrics (accuracy, F1, ROC-AUC), comparative model reports, persisted pipeline artifacts for inference, backend API for prediction.",
    "tech": "Python (pandas, scikit-learn), hyperparameter tuning (Grid/Random Search), cross-validation, pickle/joblib serialization, FastAPI (or similar) for inference backend, Kaggle environment for experimentation.",
    "achievement": "Delivered an optimized tree-based classifier with reduced training time via constrained yet effective search space; reproducible evaluation suite and deployable serialized pipeline.",
    "next": "Integrate model explainability (SHAP), expand feature engineering, add data drift & performance monitoring, explore ensemble/boosted variants, and automate CI for retraining.",
    "color": "from-teal-600 to-emerald-600",
    "highlights": [
      "Machine Learning",
      "Model optimization",
      "Model deployment"
    ],
    "model": "depression_learning.glb",
    "image": "depression_learning.png",
    "links": [
      { "label": "Repo BE", "url": "https://github.com/valentypo/depression-learning-backend.git" },
      { "label": "Repo FE", "url": "https://github.com/valentypo/machine-learning.git" },
      { "label": "Kaggle Repo ML", "url": "https://www.kaggle.com/code/valentypo/group-1-depression" },
      { "label": "Live Demo (expired BE)", "url": "https://machine-learning-mocha.vercel.app/" }
    ]
  }
]